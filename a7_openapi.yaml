openapi: 3.0.0
info:
  version: '1.0'
  title: 'Connectify Web API'
  description: 'Web Resources Specification for Connectify API'

servers:
  - url: https://lbaw2453.lbaw.fe.up.pt
    description: 'Production server'

externalDocs:
  description: Find more info here.
  url: https://gitlab.up.pt/lbaw/lbaw2223/lbaw2453/-/wikis/eap

tags:
  - name: 'M01: Authentication'
  - name: 'M02: Users'
  - name: 'M03: Posts and Comments'
  - name: 'M04: Friendship Requests'
  - name: 'M05: Groups'
  - name: 'M06: Notifications'
  - name: 'M07: Search'
  - name: 'M08: Administration'

paths:

#################################### Authentication ####################################

  /login:
    get:
      operationId: R101
      summary: 'R101: Login Form'
      description: 'Provide login form. Access: GST'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'Ok. Show log-in UI'
    post:
      operationId: R102
      summary: 'R102: Login Action'
      description: 'Processes the login form submission. Access: GST'
      tags:
        - 'M01: Authentication'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:         
                  type: string
                password:   
                  type: string
              required:
                - email
                - password

      responses:
        '302':
          description: 'Redirect after processing the login credentials.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful authentication. Redirect to user profile.'
                  value: '/users/{id}'
                302Error:
                  description: 'Failed authentication. Redirect to login form.'
                  value: '/login'


  /logout:
    post:
      operationId: R103
      summary: 'R103: Logout Action'
      description: 'Logout the current authenticated used. Access: USR, ADM'
      tags:
        - 'M01: Authentication'
      responses:
        '302':
          description: 'Redirect after processing logout.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful logout. Redirect to login form.'
                  value: '/login'


  /register:
    get:
      operationId: R104
      summary: 'R104: Register Form'
      description: 'Provide new user registration form. Access: GST'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'Ok. Show sign-up UI'

    post:
      operationId: R105
      summary: 'R105: Register Action'
      description: 'Processes the new user registration form submission. Access: GST'
      tags:
        - 'M01: Authentication'

      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                confirmPassword:
                  type: string
              required:
                - username
                - email
                - password
                - confirmPassword

      responses:
        '302':
          description: 'Redirect after processing the new user information.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful authentication. Redirect to user profile.'
                  value: '/users/{id}'
                302Failure:
                  description: 'Failed authentication. Redirect to login form.'
                  value: '/login'

#############################################Users############################################ 

  /user/{userId}:
    get:
      operationId: R201
      summary: 'R201: View user profile'
      description: 'Show the profile for an individual user, Access: GST, USR, OWN, ADM'
      tags:
        - 'M02: Users'
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
      responses:
        '200':
          description: 'OK. Show user profile'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  username:
                    type: string
                  email:
                    type: string
                  isPublic:
                    type: boolean
        '404':
          description: User not logged in or user not found


  /user/editProfile:
    get:
      operationId: R202
      summary: 'R202: Edit user profile page'
      description: 'Provide user profile edit form. Access: OWN, ADM'
      tags:
        - 'M02: Users'
      responses:
        '200':
          description: 'Ok. Show user profile edit form'
        '401':
          description: 'Unauthorized, user not allowed to edit profile.'
          headers:
            Location:
              schema:
                type: string
              examples:
                401Unauthorized:
                  description: 'Unauthorized, redirect to current user profile.'
                  value: '/user/{userId}'
        
    post:
      operationId: R203
      summary: 'R203: Edit user profile'
      description: 'Edit user profile. Access: USR, OWN'
      tags:
        - 'M02: Users'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                profilePicture:
                  type: string
                  format: uri
                isPublic:
                  type: boolean
                password:
                  type: string
                  format: password
                confirmPassword:
                  type: string
                  format: password
              required:
                - username
                - email
                - isPublic
      responses:
        '302':
          description: 'Redirect after editing user information.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful edit. Redirect to user profile.'
                  value: '/user/{userId}'
                302Failure:
                  description: 'Failed. Redirect back.'
                  value: '/user/editProfile'


  /user/deleteProfile:
    post:
      operationId: R204
      summary: 'R204: Delete user profile'
      description: 'Delete user profile. Access: OWN, ADM'
      tags:
        - 'M02: Users'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                userId:
                  type: integer
              required:
                - userId
      responses:
        '302':
          description: 'Redirect after deleting user information.'
          headers:
            Location:
              schema:
                type: string
                example:
                  302Success:
                    description: 'Successful delete. Redirect to login page.'
                  302Failure:
                    description: 'Failed. Redirect back.'


  /home:

    get:
      operationId: R205
      summary: 'R205: View home page'
      description: 'Show home page. Access: USR, ADM'
      tags:
        - 'M02: Users'

      responses:
        '200':
          description: 'OK. Show home page for an individual user'
        '302':
          description: 'Redirect if not unauthorized.'
          headers:
            Location:
              schema:
                type: string
              example:
                  302Success:
                    description: 'You need to login first. Redirect to login page.'
                    value: '/login'

##########################POSTS######################

  /post/create:
    post:
      operationId: R301
      summary: 'R301: Create a new post action'
      tags:
        - 'M03: Posts and Comments'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                content:
                  type: string
                imageUrls:
                  type: array
                  items:
                    type: string
                  description: List of image URLs
                isPublic:
                  type: boolean
              required:
                - content
      responses:
        '201':  
          description: 'Post created successfully'
          headers:
            Location:
              schema:
                type: string
              example: '/post/{postId}'  
        '400':  
          description: 'Bad request, invalid input data'
        '500': 
          description: 'Internal server error'

  /post/{postId}:
      get:
        operationId: R302
        summary: 'R302: View post'
        description: 'Show the post. Access: GST, USR, OWN, ADM'
        tags:
          - 'M03: Posts and Comments'
        parameters:
          - name: postId
            in: path
            required: true
            description: The ID of the post
            schema:
              type: string
        responses:
          '200':
            description: Post retrieved
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    id:
                      type: string
                    content:
                      type: string
                    imageUrls:
                      type: array
                      items:
                        type: string
                    postDate:
                      type: string
                      format: date-time
                    isPublic:
                      type: boolean
                    userId:
                      type: string
          '404':
            description: Post not found

  /post/delete:
    delete: 
      operationId: R303
      summary: 'R303: Delete post action'
      description: 'Delete a post. Access: OWN, ADM'
      tags:
        - 'M03: Posts and Comments'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                postId:
                  type: integer
              required:
                - postId
      responses:
        '200':
          description: Post deleted successfully
        '403':
          description: Forbidden, user not allowed to delete post  
        '401':
          description: Unauthorized, user not allowed to delete post
          headers:
            Location:
              schema:
                type: string
              example: '/users/{userId}'  # Redirecionar para o perfil do usuário

  /post/edit:
    put:  
      operationId: R304
      summary: 'R304: Edit post. Acess: OWN, ADM'
      description: 'Edit a post'
      tags:
        - 'M03: Posts and Comments'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                postId:
                  type: integer
                content:
                  type: string
                imageUrls:
                  type: array
                  items:
                    type: string
                  description: List of image URLs
                isPublic:
                  type: boolean
              required:
                - postId
                - content
      responses:
        '200':
          description: Post edited successfully
        '403':
          description: Forbidden, user not allowed to edit post

       
###############################Search###########################
  
  /api/search/exactMatch/:
    get:
      operationId: R701
      summary: 'R701: Search for exact match'
      description: 'Perform an exact match search for a given term. Access: USR'
      tags:
        - 'M08: Search'
      parameters:
        - name: query
          in: query
          required: true
          description: The exact term to search for.
          schema:
            type: string
        - name: type
          in: query
          required: true
          description: The type of search (e.g., "user", "group", "post", "comment"). Determines what type of entity to search for.
          schema:
            type: string
            enum: ['user', 'group', 'post', 'comment']
      responses:
        '200':
          description: Results retrieved successfully. Returns a list of matching results.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        type:
                          type: string
                        name:
                          type: string
                        snippet:
                          type: string
                  total:
                    type: integer
              example:
                results:
                  - id: "123"
                    type: "user"
                    name: "John Doe"
                    snippet: "John's profile description snippet."
                total: 1
        '400':
          description: Invalid search parameters (e.g., missing or invalid `query` or `type`).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "Invalid query parameter. 'type' must be one of ['user', 'group', 'post', 'comment']."
        '404':
          description: No results found for the given search criteria.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "No matching results found."

  /api/search/fulltext/:
    get:
      operationId: R702
      summary: 'R702: Search for full text'
      description: 'Search for documents or posts containing the specified keywords. Access: USR'
      tags: 
        - 'M08: Search'
      parameters:
        - name: query
          in: query
          required: true
          description: The keywords or phrase to search for.
          schema:
            type: string
        - name: type
          in: query
          required: true
          description: The type of search (e.g., "user", "group", "post", "comment"). Determines what type of entity to search for.
          schema:
            type: string
            enum: ['user', 'group', 'post', 'comment']
      responses:
        '200':
          description: Results retrieved successfully. Returns a list of matching results.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        type:
                          type: string
                        name:
                          type: string
                        snippet:
                          type: string
              example:
                results:
                  - id: "456"
                    type: "post"
                    name: "Exploring APIs"
                    snippet: "This post discusses how to interact with APIs in a full-text search."
        '400':
          description: Invalid Parameters (e.g., missing or invalid `query` or `type`).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "Invalid query parameter. 'type' must be one of ['user', 'group', 'post', 'comment']."


##### Administrator #################

  /admin/users/search:
    get:
      operationId: R801
      summary: 'R801: Search user accounts'
      description: 'Search for user accounts using filters like username, email, or roles. Access: ADM.'
      tags:
        - 'Administrator: User Management'
      parameters:
        - name: username
          in: query
          required: false
          schema:
            type: string
          description: Filter by username (partial match allowed)
        - name: email
          in: query
          required: false
          schema:
            type: string
          description: Filter by email (partial match allowed)
        - name: role
          in: query
          required: false
          schema:
            type: string
            enum: [user, moderator, admin]
          description: Filter by user role
        - name: isActive
          in: query
          required: false
          schema:
            type: boolean
          description: Filter by account status (active/inactive)
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: User ID
                    username:
                      type: string
                      description: Username
                    email:
                      type: string
                      description: User email
                    role:
                      type: string
                      description: User role
                    isActive:
                      type: boolean
                      description: Account active status
        '403':
          description: Forbidden - User does not have administrator access
        '500':
          description: Internal server error

  /admin/users/{userId}:
    get:
      operationId: R802
      summary: 'R802: View user account details'
      description: 'Retrieve detailed information about a specific user account. Access: ADM.'
      tags:
        - 'Administrator: User Management'
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the user to retrieve
      responses:
        '200':
          description: User account details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: User ID
                  username:
                    type: string
                  email:
                    type: string
                  role:
                    type: string
                    enum: [user, moderator, admin]
                  isActive:
                    type: boolean
                  createdAt:
                    type: string
                    format: date-time
                    description: Account creation date
                  updatedAt:
                    type: string
                    format: date-time
                    description: Last update date
        '403':
          description: Forbidden - User does not have administrator access
        '404':
          description: User account not found
        '500':
          description: Internal server error

  /admin/users/create:
    post:
      operationId: R803
      summary: 'R803: Create a new user account'
      description: 'Allow an administrator to create a new user account with specific attributes. Access: ADM.'
      tags:
        - 'Administrator: User Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                role:
                  type: string
                  enum: [user, moderator, admin]
                isActive:
                  type: boolean
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: User account created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: ID of the newly created user
                  username:
                    type: string
                  email:
                    type: string
                  role:
                    type: string
                  isActive:
                    type: boolean
        '400':
          description: Bad request - Validation error
        '403':
          description: Forbidden - User does not have administrator access
        '500':
          description: Internal server error

  /admin/users/edit:
    put:
      operationId: R804
      summary: 'R804: Edit user account details'
      description: 'Allow an administrator to update details of a user account. Access: ADM.'
      tags:
        - 'Administrator: User Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  description: ID of the user to edit
                username:
                  type: string
                  description: Updated username
                email:
                  type: string
                  format: email
                  description: Updated email address
                password:
                  type: string
                  format: password
                  description: Updated password
                role:
                  type: string
                  enum: [user, moderator, admin]
                  description: Updated role of the user
                isActive:
                  type: boolean
                  description: Updated account status
              required:
                - userId
      responses:
        '200':
          description: User account updated successfully
        '400':
          description: Bad request - Validation error
        '403':
          description: Forbidden - User does not have administrator access
        '404':
          description: User account not found
        '500':
          description: Internal server error

