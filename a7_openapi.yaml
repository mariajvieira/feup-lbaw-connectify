openapi: 3.0.0
info:
  version : 1.0
  title: 'Connectify Web API'
  description: 'Web Resources Specification for Connectify API'
  
servers:
  - url: https://lbaw2453.lbaw.fe.up.pt
    description: Production server

externalDocs:
  description: Find more info here.
  url: https://gitlab.up.pt/lbaw/lbaw2223/lbaw2453/-/wikis/eap

tags:
  - name: 'M01: Authentication'
  - name: 'M02: Users'
  - name: 'M03: Posts'
  - name: 'M04: Friendship Requests'
  - name: 'M05: Comments'
  - name: 'M06: Reactions'
  - name: 'M07: Groups'
  - name: 'M08: Notifications'
  - name: 'M09: Search'
  

paths:

#################################### Authentication ####################################

  /login:
   get:
      operationId: R101
      summary: 'R101: Login Form'
      description: 'Provide login form. Access: GST'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'Ok. Show log-in UI'
    post:
      operationId: R102
      summary: 'R102: Login Action'
      description: 'Processes the login form submission. Access: GST'
      tags:
        - 'M01: Authentication'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:         
                  type: string
                password:   
                  type: string
              required:
                - email
                - password

      responses:
        '302':
          description: 'Redirect after processing the login credentials.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful authentication. Redirect to user profile.'
                  value: '/users/{id}'
                302Error:
                  description: 'Failed authentication. Redirect to login form.'
                  value: '/login'


  /logout:
    post:
      operationId: R103
      summary: 'R103: Logout Action'
      description: 'Logout the current authenticated used. Access: USR, ADM'
      tags:
        - 'M01: Authentication'
      responses:
        '302':
          description: 'Redirect after processing logout.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful logout. Redirect to login form.'
                  value: '/login'


  /register:
    get:
      operationId: R104
      summary: 'R104: Register Form'
      description: 'Provide new user registration form. Access: GST'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'Ok. Show sign-up UI'

    post:
      operationId: R105
      summary: 'R105: Register Action'
      description: 'Processes the new user registration form submission. Access: GST'
      tags:
        - 'M01: Authentication'

      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                confirmPassword:
                  type: string
              required:
                - username
                - email
                - password
                - confirmPassword

      responses:
        '302':
          description: 'Redirect after processing the new user information.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful authentication. Redirect to user profile.'
                  value: '/users/{id}'
                302Failure:
                  description: 'Failed authentication. Redirect to login form.'
                  value: '/login'

  /sendVerificationCode:

    post:
      operationId: R106
      summary: 'R106 : Send Verification Code Action'
      description: 'Sends email with validation code. Access: GST'
      tags:
        - 'M01: Authentication'

      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                e-mail:
                  type: string 
              required:
                - email
               
      responses:
        '200':
          description: 'Ok. You received a verification code on your email.'
        '404':
          description: 'Error. Email doesnt exists.'



  /recoverPassword:
    post:
      operationId: R107
      summary: 'R107 : Recover Password Action'
      description: 'Changes the password with the validation code received on email. Access: GST'
      tags:
        - 'M01: Authentication'

      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                code:
                  type: string
                password:
                  type: string
                  format: password
                verify_password:
                  type: string
                  format: password
              required:
                - code
                - password
                - verify_password;

      responses:
        '200':
          description: 'Ok. Your password was changed successfully.'
        '404':
          description: 'Error. Invalid code.'


#############################################Users############################################ 

  /user/{userId}:
    get:
      operationId: R201
      summary: 'R201: View user profile'
      description: 'Show the profile for an individual user, Access: GST, USR, OWN, ADM'
      tags:
        - 'M02: Users'
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
      responses:
        '200':
          description: 'OK. Show user profile'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  username:
                    type: string
                  email:
                    type: string
                  isPublic:
                    type: boolean
        '404':
          description: User not found

  #Edit user profile
  /user/editProfile:
    get:
      operationId: R202
      summary: 'R202: Edit user profile page'
      description: 'Provide user profile edit form. Access: USR, OWN'
      tags:
        - 'M02: Users'
      responses:
        '200':
          description: 'Ok. Show user profile edit form'
        '401':
          description: 'Unauthorized, user not allowed to edit profile.'
          headers:
            Location:
              schema:
                type: string
              example:
                401Unauthorized:
                  description: 'Unauthorized, redirect to current user profile.'
                  value: '/users/{userId}'
        
    post:
      OperationId: R202
      summary: 'R202: Edit user profile'
      description: 'Edit user profile. Access: USR, OWN'
      tags:
        - 'M02: Users'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                profilePicture:
                  type: string
                  format: uri
                isPublic:
                  type: boolean
                password:
                  type: string
                  format: password
                confirmPassword:
                  type: string
                  format: password
              required:
                - username
                - email
                - isPublic
      responses:
        '302':
          description: 'Redirect after editing user information.'
          headers:
            Location:
              schema:
                type: string
              example:
                302Success:
                  description: 'Successful edit. Redirect to user profile.'
                302Failure:
                  description: 'Failed. Redirect back.'


  #Delete user profile
  /user/deleteProfile:
    post:
      OperationId: R203
      summary: 'R203: Delete user profile'
      description: 'Delete user profile. Access: USR, OWN'
      tags:
        - 'M02: Users'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                userId:
                  type: integer
              required:
                - userId
        responses:
          '302':
            description: 'Redirect after deleting user information.'
            headers:
              Location:
                schema:
                  type: string
                example:
                  302Success:
                    description: 'Successful delete. Redirect to login page.'
          '403':
            description: 'Forbidden, user not allowed to delete profile.'



  #################Friendship Requests######################

  /user/sendRequest:
    get:
     operationId: R401
     summary: 'friendship request form'
     description: 'Provide friendship request form. Access: USR'
     tags:
       - 'M04: Friendship Requests'
      responses:
        '200':
          description: 'Ok. Show friendship request form'
    post:
      operationId: R402
      summary: 'R401: Send a friendship request'
      description: 'Send a friendship request to another user. Access: USR'
      tags:
        - 'M04: Friendship Requests'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                userId:
                  type: integer
              required:
                - userId
      responses:
      '302':
        description: 'Redirect after sending request.'
        headers:
          Location:
            schema:
              type: string
            example:
              302Success:
                description: 'Successful request sent. Redirect back.'
              302Failure:
                description: 'Failed. Redirect back.'

  /user/acceptRequest:
    get:
      operationId: R403
      summary: 'friendship request form'
      description: 'Provide friendship request form. Access: USR'
      tags:
        - 'M04: Friendship Requests'
      responses:
        '200':
          description: 'Ok. Show friendship request form'
    post:
      operationId: R404
      summary: 'R405: Accept a friendship request'
      description: 'Accept a friendship request from another user. Access: USR'
      tags:
        - 'M04: Friendship Requests'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                userId:
                  type: integer
              required:
                - userId
      responses:
        '302':

  /user/rejectRequest:
    get:
      operationId: R405
      summary: 'friendship request form'
      description: 'Provide friendship request form. Access: USR'
      tags:
        - 'M04: Friendship Requests'
      responses:
        '200':
          description: 'Ok. Show friendship request form'
    post:
      operationId: R406
      summary: 'R403: Reject a friendship request'
      description: 'Reject a friendship request from another user. Access: USR'
      tags:
        - 'M02: Friendship Requests'	
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                userId:
                  type: integer
              required:
                - userId
      responses:
        '200':
          description: Request rejected successfully
        '403':
          description: Forbidden, user not allowed to reject request

###################### Static Pages ######################

  /about:

    get:
      operationId: R406
      summary: 'R220: Get About Page'
      description: 'Show About Page. Access USR, ADM, VST'
      tags:
        - 'M02: Users'
      responses:
        '200':
          description: 'OK. Show page'

  ########################POSTS######################

  ##Create a new post
  /post/create:
    get:
      operationId: R501
      summary: 'R501: Create a new post page'
      description: 'Provide post creation form. Access: USR'
      tags:
        - 'M03: Posts'
      responses:
        '200':
          description: 'Ok. Show post creation form'
    post:
      operationId: R502
      summary: 'R502: Create a new post action'
      summary: Create a new post
      tags:
        - Posts
      requestBody:
        required: true
          content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                content:
                  type: string
                imageUrls:
                  type: array
                  items:
                    type: string
                  description: List of image URLs
                isPublic:
                  type: boolean
              required:
                - content
      responses:
        '302':
          description: 'Redirect after processing new post'          
          headers:
            Location:
              schema:
                type: string
              example:
                302Success:
                  description: 'Successful post create. Redirect back.'
                302Failure:
                  description: 'Failed. Redirect back.'

  /post/{postId}:
    get:
      operationId: R503
      summary: 'R503: View post'
      description: 'Show the post. Access: GST, USR, OWN, ADM'
      tags:
        - 'M03: Posts'
      parameters:
        - name: postId
          in: path
          required: true
          description: The ID of the post
          schema:
            type: string
      responses:
        '200':
          description: Post retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  content:
                    type: string
                  imageUrls:
                    type: array
                    items:
                      type: string
                  postDate:
                    type: string
                    format: date-time
                  isPublic:
                    type: boolean
                  userId:
                    type: string
          '404':
            description: Post not found

  # Delete a post
  /post/delete:
    get:
      operationId: R504
      summary: 'R504: Delete post page'
      description: 'Provide post deletion form. Access: USR, OWN'
      tags:
        - 'M03: Posts'
      responses:
        '200':
          description: 'Ok. Show post deletion form'
      '401':
          description: 'Unauthorized, user not allowed to delete post.'
        headers:
          Location:
             schema:
              type: string
            example:
              401Unauthorized:
                description: 'Unauthorized, redirect to current user profile.'
                value: '/users/{userId}'
    post:
      operationId: R505
      summary: 'R505: Delete a post'
      description: Delete a post actioN
      tags:
        - 'M03: Posts'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                postId:
                  type: integer
              required:
                - postId
      responses:
      '200':
        description: Post deleted successfully
      '403':
        description: Forbidden, user not allowed to delete post  

  #Edit a post
  /post/edit:
    post:
      operationId: R506
      summary: 'R506: Edit post'
      description: Edit a post
      tags:
        - 'M03: Posts'
        
      requestBody:
        required: true
        content:
        application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                postId:
                  type: integer
                content:
                  type: string
                imageUrls:
                  type: array
                  items:
                    type: string
                  description: List of image URLs
                isPublic:
                  type: boolean
              required:
                - postId
                - content
        
      responses:
      '200':
        description: Post edited successfully
      '403':
        description: Forbidden, user not allowed to edit post


  /post/comments:
      get:
        operationId: R507
        summary: 'R507: Get comments of a post'
        description: 'Get comments of a post. Access: GST, USR, OWN, ADM'
        tags:
            - 'M03: Posts'
        parameters:
            - name: postId
              in: path
              required: true
              description: The ID of the post
              schema:
                type: string
          responses:
            '200':
              description: Comments retrieved
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        content:
                          type: string
                        commentDate:
                          type: string
                          format: date-time
                        userId:
                          type: string
            '404':
              description: Post not found

###################Reactions####################
  
  /post/react:
    post:
      operationId: R508
      summary: 'R508: React to a post'
      description: 'React to a post. Access: USR'
      tags:
        - 'M03: Posts'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                postId:
                  type: integer
                reactionType:
                  type: string
                userId: 
                  type: integer
              required:
                - postId
                - reactionType
      responses:
        '302':
          description: 'Redirect after processing new reaction'
          headers:
            Location:
              schema:
                type: string
              example:
                302Success:
                  description: 'Successful reaction. Redirect back.'
                302Failure:
                  description: 'Failed. Redirect back.'

  /post/reactions:
      get:
        operationId: R508
        summary: 'R508: Get reactions of a post'
        description: 'Get reactions of a post. Access: GST, USR, OWN, ADM'
        tags:
            - 'M03: Posts'
        parameters:
            - name: postId
              in: path
              required: true
              description: The ID of the post
              schema:
                type: string
          responses:
            '200':
              description: Reactions retrieved
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        reactionType:
                          type: string
                        reactionDate:
                          type: string
                          format: date-time
                        userId:
                          type: string
            '404':
              description: Post not found  

###################Comments####################          
  /comment/create:
    post:
      operationId: R601
      summary: 'R601: Create a new comment'
      description: 'Create a new comment. Access: USR'
      tags:
       - 'M06: Comments'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                postId:
                  type: integer
                content:
                  type: string
              required:
                - postId
                - content
      responses:
        '302':
          description: 'Redirect after processing new comment'
          headers:
            Location:
              schema:
                type: string
              example:
                302Success:
                  description: 'Successful comment create. Redirect back.'
                302Failure:
                  description: 'Failed. Redirect back.'
  
  /comment/edit:
    post:
      operationId: R602
      summary: 'R602: Edit a comment'
      description: 'Edit a comment. Access: USR, OWN'
      tags:
        - 'M06: Comments'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                commentId:
                  type: integer
                content:
                  type: string
              required:
                - commentId
                - content
      responses:
        '200':
          description: Comment edited successfully
        '403':
          description: Forbidden, user not allowed to edit comment


  /comment/delete:
    post:
      operationId: R603
      summary: 'R603: Delete a comment'
      description: 'Delete a comment. Access: USR, OWN'
      tags:
        - 'M06: Comments'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                commentId:
                  type: integer
              required:
                - commentId
      responses:
        '200':
          description: Comment deleted successfully
        '403':
          description: Forbidden, user not allowed to delete comment

###################Groups####################

  /groups:
    get:
      operationId: R701
      summary: 'R701: Get groups'
      description: 'Get groups page. Access: GST, USR, OWN, ADM'
      tags:
        - 'M07: Groups'
      responses:
        '200':
          description: Groups retrieved. Show groups page.
        '302':
          description: 'Redirect after processing groups page'
          headers:
            Location:
              schema:
                type: string
              example:
                302Success:
                  description: 'Access Unauthorized. Login to your account.'
                  value: '/login'
              
  /group/{groupId}:
    get:
      operationId: R702
      summary: 'R702: View group'
      description: 'Show specific group. Access: GST, USR, OWN, ADM'
      tags:
        - 'M07: Groups'
      parameters:
        - name: groupId
          in: path
          required: true
          description: The ID of the group
          schema:
            type: string
      responses:
        '200':
          description: Group retrieved, show group page
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  description:
                    type: string
                  isPublic:
                    type: boolean
        '302':
          description: 'Redirect after processing group page'
          headers:
            Location:
              schema:
                type: string
              example:
                302Success:
                  description: 'Access Unauthorized. Login to your account.'
                  value: '/login'


  /group/create:
    post:
      operationId: R703
      summary: 'R703: Create a new group'
      description: 'Create a new group. Access: USR'
      tags:
        - 'M07: Groups'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                isPublic:
                  type: boolean
              required:
                - name
                - description
                - isPublic
      responses:
        '302':
          description: 'Redirect after processing new group'
          headers:
            Location:
              schema:
                type: string
              example:
                302Success:
                  description: 'Successful group create. Redirect back.'
                302Failure:
                  description: 'Failed. Redirect back.'
  /group/edit:
    post:
      operationId: R704
      summary: 'R704: Edit a group'
      description: 'Edit a group. Access: USR, OWN'
      tags:
        - 'M07: Groups'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                isPublic:
                  type: boolean
              required:
                - name
                - description
                - isPublic
      responses:
        '302':
          description: 'Redirect after processing edit group'
          headers:
            Location:
              schema:
                type: string
              example:
                302Success:
                  description: 'Successful group edit. Redirect back.'
                  value: '/group/{groupId}'
                302Failure:
                  description: 'Failed. Redirect back.'
                  value: '/group/edit'


  /group/{groupId}/edit:  
    get:
      operationId: R705
      summary: 'R705: Edit group paga'
      description: 'Provide group edit page. Access: USR, OWN'
      tags:
        - 'M07: Groups'
      parameters:
        - name: groupId
          in: path
          required: true
          description: The ID of the group
          schema:
            type: string
      responses:
        '200':
          description: 'Ok. Show group edit form'
        '401':
          description: 'Unauthorized, user not allowed to edit group.'
          headers:
            Location:
              schema:
                type: string
              example:
                401Unauthorized:
                  description: 'Unauthorized, redirect to current group page.'
                  value: '/group/{groupId}'              	    

  /group/delete:
    post:
      operationId: R705
      summary: 'R705: Delete a group'
      description: 'Delete a group. Access: USR, OWN'
      tags:
        - 'M07: Groups'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                groupId:
                  type: integer
              required:
                - groupId
      responses:
        '200':
          description: Group deleted successfully
        '403':
          description: Forbidden, user not allowed to delete group
##
  /group/RequestJoin:
    post:
      operationId: R706 
      summary: 'R706: Join a group'
      description: 'Join a group. Access: USR'
      tags:
        - 'M07: Groups'

      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                groupId:
                  type: integer
              required:
                - groupId
                - userId
      responses:
        '302':
          description: 'Redirect after processing join group'
          headers:
            Location:
              schema:
                type: string
              example:
                302Success:
                  description: 'Successful group join. Redirect back.'
                302Failure:
                  description: 'Failed. Redirect back.'

  /group/leave:
    post:
      operationId: R707
      summary: 'R707: Leave a group'
      description: 'Leave a group. Access: USR'
      tags:
        - 'M07: Groups'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                groupId:
                  type: integer
              required:
                - groupId
                - userId
      responses:
        '302':
          description: 'Redirect after processing leave group'
          headers:
            Location:
              schema:
                type: string
              example:
                302Success:
                  description: 'Successful group leave. Redirect back.'
                302Failure:
                  description: 'Failed. Redirect back.'
    
  /group/acceptJoinRequest:
    post:
      operationId: R708
      summary: 'R708: Accept a join request'
      description: 'Accept a join request. Access: USR'
      tags:
        - 'M07: Groups'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                groupId:
                  type: integer
              required:
                - groupId
                - userId
      responses:
        '202':
          description: 'Request accepted'
        '401'
          description: 'Unauthorized, user not allowed to accept request.'

  /group/rejectJoinRequest:
    post:
      operationId: R709
      summary: 'R709: Reject a join request'
      description: 'Reject a join request. Access: USR'
      tags:
        - 'M07: Groups'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                groupId:
                  type: integer
              required:
                - groupId
                - userId
      responses:
        '202':
          description: 'Request accepted'
        '401'
          description: 'Unauthorized, user not allowed to accept request.'

  /notifications:
    get:
      operationId: R801
      summary: 'R801: Get notifications'
      description: 'Get notifications page. Access: USR'
      tags:
        - 'M08: Notifications'
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
        - name: type
          in: path
          required: false
          description: The type of notification
          schema:
            type: string

      responses:
        '200':
          description: Notifications retrieved. Show notifications page.
        '403'
          description: 'Forbidden, user not allowed to access notifications.'

#############################Search###########################

  /api/serch/exactMatch:
    get:
      operationId: R901
      summary: 'R901: Search for exact match'
      description: 'Search for exact match. Access: USR'
      tags:
        - 'M09: Search'
      parameters:
        - name: query
          in: path
          required: true
          description: The exact query to search
          schema:
            type: string
        - name: type
          in: path
          required: true
          description: The type of search
          schema:
            type: string
            enum: ['user', 'group', 'post','comment']
      responses:
        '200':
          description: Results retrieved. Show search results page.
          content:
            application/json:
             schema:
              type: object
              items:
                type: object
              properties:
                id:
                  type: string
                type:
                  type: string
                name:
                  type: string
                snippet:
                  type: string
              total:
                type: integer
        '400':
          description: Invalid search parameters.'

  /api/search/fulltext:
    get:
      operationId: R902
      summary: 'R902: Search for full text'
      description: 'Search for full text. Access: USR'
      tags: 
        - 'M09: Search'
      parameters:
        - name: query
          in: path
          required: true
          description: The keywords to search for.
          schema:
            type: string
        - name: type
          in: path
          required: false
          description: The type of search
          schema:
            type: string
            enum: ['user', 'group', 'post','comment']
      responses:
        '200':
          description: Results retrieved. Show results.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        type:
                          type: string
                        name:
                          type: string
                        snippet:
                          type: string
        '400':
          description: 'Invalid Parameters.'
