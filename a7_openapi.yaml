openapi: 3.0.0
info:
  version : 1.0
  title: 'Connectify Web API'
  description: 'Web Resources Specification for Connectify API'
  
servers:
  - url: https://lbaw2453.lbaw.fe.up.pt
    description: Production server

externalDocs:
  description: Find more info here.
  url: https://gitlab.up.pt/lbaw/lbaw2223/lbaw2453/-/wikis/eap

tags:
  - name: 'M01: Authentication'
  - name: 'M02: Users'
  - name: 'M03: Posts'
  - name: 'M04: Friendship Requests'
  - name: 'M05: Comments'
  - name: 'M06: Reactions'
  - name: 'M07: Groups'
  - name: 'M08: Notifications'
  - name: 'M09: Administration'

paths:

#################################### Authentication ####################################

  /login:
   get:
      operationId: R101
      summary: 'R101: Login Form'
      description: 'Provide login form. Access: GST'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'Ok. Show log-in UI'
    post:
      operationId: R102
      summary: 'R102: Login Action'
      description: 'Processes the login form submission. Access: GST'
      tags:
        - 'M01: Authentication'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:         
                  type: string
                password:   
                  type: string
              required:
                - email
                - password

      responses:
        '302':
          description: 'Redirect after processing the login credentials.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful authentication. Redirect to user profile.'
                  value: '/users/{id}'
                302Error:
                  description: 'Failed authentication. Redirect to login form.'
                  value: '/login'


  /logout:
    post:
      operationId: R103
      summary: 'R103: Logout Action'
      description: 'Logout the current authenticated used. Access: USR, ADM'
      tags:
        - 'M01: Authentication'
      responses:
        '302':
          description: 'Redirect after processing logout.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful logout. Redirect to login form.'
                  value: '/login'


  /register:
    get:
      operationId: R104
      summary: 'R104: Register Form'
      description: 'Provide new user registration form. Access: GST'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'Ok. Show sign-up UI'

    post:
      operationId: R105
      summary: 'R105: Register Action'
      description: 'Processes the new user registration form submission. Access: GST'
      tags:
        - 'M01: Authentication'

      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                confirmPassword:
                  type: string
              required:
                - username
                - email
                - password
                - confirmPassword

      responses:
        '302':
          description: 'Redirect after processing the new user information.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful authentication. Redirect to user profile.'
                  value: '/users/{id}'
                302Failure:
                  description: 'Failed authentication. Redirect to login form.'
                  value: '/login'

  /sendVerificationCode:

    post:
      operationId: R106
      summary: 'R106 : Send Verification Code Action'
      description: 'Sends email with validation code. Access: GST'
      tags:
        - 'M01: Authentication'

      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                e-mail:
                  type: string 
              required:
                - email
               
      responses:
        '200':
          description: 'Ok. You received a verification code on your email.'
        '404':
          description: 'Error. Email doesnt exists.'



  /recoverPassword:
    post:
      operationId: R107
      summary: 'R107 : Recover Password Action'
      description: 'Changes the password with the validation code received on email. Access: GST'
      tags:
        - 'M01: Authentication'

      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                code:
                  type: string
                password:
                  type: string
                  format: password
                verify_password:
                  type: string
                  format: password
              required:
                - code
                - password
                - verify_password;

      responses:
        '200':
          description: 'Ok. Your password was changed successfully.'
        '404':
          description: 'Error. Invalid code.'


  /users/{id}:
    get:
      operationId: R108
      summary: 'R108: View user profile'
      description: 'Show the individual user profile. Access: USR'
      tags:
        - 'M01: Authentication'

      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true

      responses:
        '200':
          description: 'Ok. Show view profile UI'


#############################################Users############################################ 

  /users/{userId}:
    get:
      operationId: R201
      summary: 'R201: View user profile'
      description: 'Show the profile for an individual user, Access: GST, USR, OWN, ADM'
      tags:
        - 'M02: Users'
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
      responses:
        '200':
          description: 'OK. Show user profile'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  username:
                    type: string
                  email:
                    type: string
                  isPublic:
                    type: boolean
        '404':
          description: User not found

  #Edit user profile
  /user/editProfile:
    post:
      OperationId: R202
      summary: 'R202: Edit user profile'
      description: 'Edit user profile. Access: USR, OWN'
      tags:
        - 'M02: Users'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                profilePicture:
                  type: string
                  format: uri
                isPublic:
                  type: boolean
              required:
                - username
                - email
                - isPublic
      responses:
        '302':
          description: 'Redirect after editing user information.'
          headers:
            Location:
              schema:
                type: string
              example:
                302Success:
                  description: 'Successful edit. Redirect to user profile.'
                302Failure:
                  description: 'Failed. Redirect back.'


  #Delete user profile
  /user/deleteProfile:
    post:
      OperationId: R203
      summary: 'R203: Delete user profile'
      description: 'Delete user profile. Access: USR, OWN'
      tags:
        - 'M02: Users'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                userId:
                  type: integer
              required:
                - userId
        responses:
          '302':
            description: 'Redirect after deleting user information.'
            headers:
              Location:
                schema:
                  type: string
                example:
                  302Success:
                    description: 'Successful delete. Redirect to login page.'
          '403':
            description: 'Forbidden, user not allowed to delete profile.'



  #################Friendship Requests######################

  /user/sendRequest:
    get:
     operationId: R401
     summary: 'friendship request form'
     description: 'Provide friendship request form. Access: USR'
     tags:
       - 'M04: Friendship Requests'
      responses:
        '200':
          description: 'Ok. Show friendship request form'
    post:
      operationId: R402
      summary: 'R401: Send a friendship request'
      description: 'Send a friendship request to another user. Access: USR'
      tags:
        - 'M04: Friendship Requests'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                userId:
                  type: integer
              required:
                - userId
      responses:
      '302':
        description: 'Redirect after sending request.'
        headers:
          Location:
            schema:
              type: string
            example:
              302Success:
                description: 'Successful request sent. Redirect back.'
              302Failure:
                description: 'Failed. Redirect back.'

  /user/acceptRequest:
    get:
      operationId: R403
      summary: 'friendship request form'
      description: 'Provide friendship request form. Access: USR'
      tags:
        - 'M04: Friendship Requests'
      responses:
        '200':
          description: 'Ok. Show friendship request form'
    post:
      operationId: R405
      summary: 'R405: Accept a friendship request'
      description: 'Accept a friendship request from another user. Access: USR'
      tags:
        - 'M04: Friendship Requests'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                userId:
                  type: integer
              required:
                - userId
      responses:
        '302':

  /user/rejectRequest:
    get:
      operationId: R405
      summary: 'friendship request form'
      description: 'Provide friendship request form. Access: USR'
      tags:
        - 'M04: Friendship Requests'
      responses:
        '200':
          description: 'Ok. Show friendship request form'
    post:
      operationId: R406
      summary: 'R403: Reject a friendship request'
      description: 'Reject a friendship request from another user. Access: USR'
      tags:
        - 'M02: Friendship Requests'	
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                userId:
                  type: integer
              required:
                - userId
      responses:
        '200':
          description: Request rejected successfully
        '403':
          description: Forbidden, user not allowed to reject request
  ########################POSTS######################

  ##Create a new post
    /post/create:
      get:
        operationId: R501
        summary: 'R501: Create a new post'
        description: 'Provide post creation form. Access: USR'
        tags:
          - 'M03: Posts'
        responses:
          '200':
            description: 'Ok. Show post creation form'
      post:
        summary: Create a new post
        tags:
          - Posts
        requestBody:
          required: true
          content:
            application/x-www-form-urlencoded:
              schema:
                type: object
                properties:
                  content:
                    type: string
                  imageUrls:
                    type: array
                    items:
                      type: string
                    description: List of image URLs
                  isPublic:
                    type: boolean
                required:
                  - content
        responses:
          '302':
            description: 'Redirect after processing new post'          
            headers:
              Location:
                schema:
                  type: string
                example:
                  302Success:
                    description: 'Successful post create. Redirect back.'
                  302Failure:
                    description: 'Failed. Redirect back.'

    /post/{postId}:
      get:
        summary: Get post by post ID
        tags:
          - Posts
        parameters:
          - name: postId
            in: path
            required: true
            description: The ID of the post
            schema:
              type: string
        responses:
          '200':
            description: Post retrieved
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    id:
                      type: string
                    content:
                      type: string
                    imageUrls:
                      type: array
                      items:
                        type: string
                    postDate:
                      type: string
                      format: date-time
                    isPublic:
                      type: boolean
                    userId:
                      type: string
          '404':
            description: Post not found

  # Delete a post
    /post/delete:
      post:
        summary: Delete a post
        tags:
          - Posts
        requestBody:
          required: true
          content:
            application/x-www-form-urlencoded:
              schema:
                type: object
                properties:
                  postId:
                    type: integer
                required:
                  - postId
        responses:
        '200':
          description: Post deleted successfully
        '403':
          description: Forbidden, user not allowed to delete post  

  #Edit a post
    /post/edit:
      post:
        summary: Edit a post
        tags:
          - Posts
        
        requestBody:
          required: true
          content:
            application/x-www-form-urlencoded:
              schema:
                type: object
                properties:
                  postId:
                    type: integer
                  content:
                    type: string
                  imageUrls:
                    type: array
                    items:
                      type: string
                    description: List of image URLs
                  isPublic:
                    type: boolean
                required:
                  - postId
                  - content
        responses:
        '200':
          description: Post edited successfully
        '403':
          description: Forbidden, user not allowed to edit post

  #Comment
    /posts/{postId}/comments:
      post:
        summary: Add a comment to a post
        tags:
          - Comments
        parameters:
          - name: postId
            in: path
            required: true
            description: The ID of the post
            schema:
              type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: string
                required:
                  - content
        responses:
          '201':
            description: Comment added successfully
          '404':
            description: Post not found

        get:
          summary: Get comments of a post
          tags:
            - Comments
          parameters:
            - name: postId
              in: path
              required: true
              description: The ID of the post
              schema:
                type: string
          responses:
            '200':
              description: Comments retrieved
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        content:
                          type: string
                        commentDate:
                          type: string
                          format: date-time
                        userId:
                          type: string
            '404':
              description: Post not found

    /notifications:
      get:  
        summary: Get user notifications
        tags:
          - Notifications
        responses:
          '200':
            description: Notifications retrieved
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                      content:
                        type: string
                      isRead:
                        type: boolean
                      notificationDate:
                        type: string
                        format: date-time

    /notifications/{notificationId}/read:
      patch:
        summary: Mark a notification as read
        tags:
          - Notifications
        parameters:
          - name: notificationId
            in: path
            required: true
            description: The ID of the notification
            schema:
              type: string
        responses:
          '200':
            description: Notification marked as read
          '404':
            description: Notification not found
  components:
    schemas:
      User:
        type: object
        properties:
          id:
            type: string
          username:
            type: string
          email:
            type: string
            format: email
          profilePicture:
            type: string
            format: uri
          isPublic:
            type: boolean
      Post:
        type: object
        properties:
          id:
            type: string
          content:
            type: string
          imageUrls:
            type: array
            items:
              type: string
          postDate:
            type: string
            format: date-time
          isPublic:
            type: boolean
          userId:
            type: string


  ...
